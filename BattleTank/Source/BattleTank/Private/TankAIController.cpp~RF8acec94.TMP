// Fill out your copyright notice in the Description page of Project Settings.

#include "TankAIController.h"
#include "TankAimingComponent.h"
#include "Engine/World.h"
#include "Tank.h"


void ATankAIController::BeginPlay() {

	Super::BeginPlay();

}

void ATankAIController::Tick(float DeltaTime) {

	Super::Tick(DeltaTime);

	auto PlayerTank = GetWorld()->GetFirstPlayerController()->GetPawn();
	auto ControlledTank = GetPawn();

	if (!PlayerTank && !ControlledTank) { return; }

	// move toward the player
	MoveToActor(PlayerTank, AcceptanceRadius); // TODO check radius is in cm
	if (!PlayerTank) { return; }
	// Aim toward the player
	auto AimingComponent = ControlledTank->FindComponentByClass<UTankAimingComponent>();
	AimingComponent->AimAt(PlayerTank->GetActorLocation());

	if (AimingComponent->GetFiringState() == EFiringState::Locked) {

		AimingComponent->Fire();
	}
}

void ATankAIController::SetPawn(APawn * InPawn) {
	Super::SetPawn(InPawn);

	if (InPawn) {

		auto PossessedTank = Cast<ATank>(InPawn);
		if (!ensure(PossessedTank)) { return; }
		// added a listener to the dynamic delegate
		PossessedTank->OnDeath.AddUniqueDynamic(this, &ATankAIController::OnPossessedTankDeath);
	}
}

void ATankAIController::OnPossessedTankDeath() {

	if (!ensure(GetPawn())) { return; }

	GetPawn()->DetachFromControllerPendingDestroy();

	UE_LOG (LogTemp, Warning, TEXT("Rececived"))
}